---
title: 网页版本对比系列二 ——业务对比逻辑及行内对比 
layout: post
category: 技术
tag:
    - 技术
    - 算法
---

上三节，基本对是对具体的对比算法的描述，而要很好的把算法应用得具体的业务场景，还需要一些
必需的逻辑规则及优化。

如在具体在应用上面的介绍的对比算法进行字串的对比时，不是简单的就将两串丢人算法入口就OK了，
还需要做一些加速措施及资源控制具体认为比较重要的有以下三点，不细说:

    1.  优先求取公共前串与公共后串。
    2.  进行简单的子串判定。
    3.  进行计算时间，资源利用的控制。

以上的前两点主要是为了尽可能的缩短以diff算法进行计算的字串的长度，以提升性能及资源需求（实际证明提升效果非常显著，因
为采用的diff算法，是一个递归的求解子问题的过程），第三点是为了能够在计算复杂度太高时，还是能够给出一个粗糙的对比结果，
而不是无法给出结果。

下面具体说业务中，完成整个网页对比过程的流程，然后详细说明一些行内对比的细则。

###对比流程

为加速完成对比，实际的网页对比时是先进行段落的对比，再进行行内的的对比，因为在业务场景下，通过两网页还是具有一定的相似度的。
段落对比开始始，采用了多级流程，这儿只说最后使用的简单的分段方法，即简单的以`h2, h3, p, table, ul, ol ` 等标签对网页进行分段。
如下：

```php
    $old_content = preg_replace('/<\/(h2|h3|p|table|ul|ol)>/', "$0\0", $old_content);
    $a = explode("\0", $old_content);
    $new_content = preg_replace('/<\/(h2|h3|p|table|ul|ol)>/', "$0\0", $new_content);
    $b = explode("\0", $new_content);
```

在进行上面的切分后，实现上段落间的对比就变成了两数组的对比（可以是切分后的两原串的对比，也可以是md5的处理后的串的对比，不过在业务中
由于各种原因，需要在段落的对比时进行一定程度的脱标签的对比，以尽可能小的减小标签对最后对比结果的影响。因此采用的是md5的串的对比，md5
同时做了向原串内容的索引）。

在完成段落间的对比后，最为重要的就是处理段内的对比，也及这儿称的行内对比。  
对比的内容早根据段落对比的结果的提取出对应的原串的内容进行对比，原串的带全html标签的（即未进行脱标签处理的）,因为在进行行内对比时需要尽可能多
的对比出变化的细节，因此，在行内对比不可能做脱标签处理后进行对比的。但是这儿就出现的一个矛盾。就是，不脱标签对比，标签会对对比结果产生非常大的影响
导致对比结果出现非常大的偏差（因为由于历史原因，对比内容的html标签不是统一化的，有很多垃圾的标签夹在其中，但这些标签对于实现的显示效果也不会有影响
但是却不能却除）
